extern crate piston_window;
use piston_window::*;

use tic_tac_torture::*;

const WINDOW_WIDTH: f64 = 640.0;
const WINDOW_HEIGHT: f64 = 640.0;

const BACKGROUND_COLOR: [f32; 4] = [51.0/255.0, 51.0/255.0, 51.0/255.0, 1.0];
const GRID_COLOR: [f32; 4] = [150.0/255.0, 150.0/255.0, 150.0/255.0, 1.0];

const X_COLOR: [f32; 4] = [1.0, 0.0, 0.0, 1.0];
const O_COLOR: [f32; 4] = [0.0, 0.0, 1.0, 1.0];

fn draw(game: &Game, context: &Context, graphics: &mut G2d) {
    let viewport = match context.viewport {
        Some(v) => v,
        None => panic!("Context doesn't have a viewport??? idk what that even means."),
    };

    clear(BACKGROUND_COLOR, graphics);

    let num_rows = game.board.len() as i32;
    let [x, y, width, height] = viewport.rect;
    let cell_width: i32 = width / num_rows;
    let cell_height: i32 = height / num_rows;


    for i in 0..num_rows {

        // draw game pieces
        let y = (y + (i * cell_height)) as f64;
        for j in 0..num_rows {
            let x = (x + (j * cell_width)) as f64;
            let cell_rect = [x, y, cell_width as f64, cell_height as f64];

            let cell = game.board[i as usize][j as usize];
            match cell {
                'X' => draw_x(context, graphics, cell_rect),
                'O' => draw_o(context, graphics, cell_rect),
                _ => (),
            }
        }
    }

    draw_grid(game, context, graphics);
}

fn draw_x(context: &Context, graphics: &mut G2d, rect: types::Rectangle) {
    rectangle(X_COLOR, rect, context.transform, graphics);
}

fn draw_o(context: &Context, graphics: &mut G2d, rect: types::Rectangle) {
    let pad = 0.15;
    let line_width = 10.0;
    let width_pad  = rect[2] * pad;
    let height_pad = rect[3] * pad;
    let width      = rect[2] - 2.0*width_pad;
    let height     = rect[3] - 2.0*height_pad;
    let size = if width > height { width } else { height };
    let new_rect = [rect[0] + width_pad, rect[1] + height_pad, size, size];
    ellipse(O_COLOR, new_rect, context.transform, graphics);
    ellipse(
        BACKGROUND_COLOR,
        [new_rect[0] + line_width, new_rect[1] + line_width,
         new_rect[2] - 2.0*line_width, new_rect[3] - 2.0*line_width],
        context.transform,
        graphics
    );
}


fn draw_grid(game: &Game, context: &Context, graphics: &mut G2d) {
    let viewport = match context.viewport {
        Some(v) => v,
        None => panic!("Context doesn't have a viewport??? idk what that even means."),
    };

    let num_rows = game.board.len() as i32;
    let [x, y, width, height] = viewport.rect;
    let cell_width: i32 = width / num_rows;
    let cell_height: i32 = height / num_rows;
    let line_radius: f64 = 2.0;
    for i in 0..=num_rows {
        // draw vertical grid lines
        let x0 = (x + (i * cell_width)) as f64;
        let y0: f64 = 0.0;
        let x1 = x0;
        let y1 = height as f64;

        line_from_to(
            GRID_COLOR, line_radius,
            [x0, y0], [x1, y1],
            context.transform, graphics
        );

        // draw horizontal grid lines
        let x0: f64 = 0.0;
        let y0 = (y + (i * cell_height)) as f64;
        let x1 = width as f64;
        let y1 = y0;

        line_from_to(
            GRID_COLOR, line_radius,
            [x0, y0], [x1, y1],
            context.transform, graphics
        );
    }
}

fn main() {
    let mut window: PistonWindow =
        WindowSettings::new("Hello Piston!", [WINDOW_WIDTH, WINDOW_HEIGHT])
            .exit_on_esc(true)
            .resizable(false)
            .build()
            .unwrap();

    let mut game = Game::new();
    game.board[0][0] = 'X';
    game.board[2][1] = 'X';
    game.board[1][1] = 'O';
    game.board[2][2] = 'O';

    while let Some(event) = window.next() {
        window.draw_2d(&event, |context, graphics, _device| {
            draw(&game, &context, graphics);
        });
    }
}
